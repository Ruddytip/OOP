#pragma once
#include <iostream>
#include <vector>

// Масти: пики, трефы, червы, бубны
enum{spade, club, heart, diamond};
// Валет, Дама, Король, Туз, Джокер
enum{jack, queen, king, ace};

// Создать класс Card, описывающий карту в игре БлэкДжек.
// У этого класса должно быть три поля: масть, значение карты и положение карты (вверх лицом или рубашкой).
// Сделать поля масть и значение карты типом перечисления (enum). Положение карты - тип bool. Также в этом классе должно быть два метода:
// метод Flip(), который переворачивает карту, т.е. если она была рубашкой вверх, то он ее поворачивает лицом вверх, и наоборот.
// метод GetValue(), который возвращает значение карты, пока можно считать, что туз = 1.
// Игровая карта
class Card{
private:
    // Масть карты
    unsigned char suit;
    // Значение в виде очков
    unsigned short face;
    // Положение карты
    bool dir;
public:
    // Конструктор - значение, масть
    Card(const unsigned short _face, const unsigned char _suit);
    // Переворачивает карту, т.е. если она была рубашкой вверх, то он ее поворачивает лицом вверх, и наоборот
    void Flip();
    // Возвращает значение карты, пока можно считать, что туз = 1
    unsigned short GetValue() const;
};

// Реализовать класс Hand, который представляет собой коллекцию карт.
// В классе будет одно поле: вектор указателей карт (удобно использовать вектор, т.к. это по сути динамический массив, а тип его элементов должен быть - указатель на объекты класса Card).
// Также в классе Hand должно быть 3 метода:
// • метод Add, который добавляет в коллекцию карт новую карту, соответственно он принимает в качестве параметра указатель на новую карту
// • метод Clear, который очищает руку от карт
// • метод GetValue, который возвращает сумму очков карт руки (здесь предусмотреть возможность того, что туз может быть равен 11).
// Карты в руке (по сути мини-колода)
class Hand{
private:
    std::vector<Card> cards;
public:
    // Добавляет карту
    void add(const Card _card);
    // Очищает руку
    void clear();
    // возвращает сумму очков карт руки (здесь предусмотреть возможность того, что туз может быть равен 11)
    int GetValue() const;
};

// Согласно иерархии классов, которая представлена в методичке к уроку 3, от класса Hand наследует класс GenericPlayer,
// который обобщенно представляет игрока, ведь у нас будет два типа игроков - человек и компьютер. Создать класс GenericPlayer, в который добавить поле name - имя игрока. Также добавить 3 метода:
// • IsHitting() - чисто виртуальная функция, возвращает информацию, нужна ли игроку еще одна карта.
// • IsBoosted() - возвращает bool значение, есть ли у игрока перебор
// • Bust() - выводит на экран имя игрока и объявляет, что у него перебор.
class GenericPlayer: public Hand{
private:
    std::string name;
public:
    GenericPlayer(const std::string _name);
    // возвращает информацию, нужна ли игроку еще одна карта
    virtual bool IsHitting() const = 0;
    // возвращает bool значение, есть ли у игрока перебор
    bool IsBoosted() const;
    // выводит на экран имя игрока и объявляет, что у него перебор
    void Bust() const;
};